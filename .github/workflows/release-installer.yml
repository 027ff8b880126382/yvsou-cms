
name: Build & Upload Installer Packages

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - dev
  workflow_dispatch:
permissions:
  contents: write 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # ✅ Official GitHub checkout action (verified)
    - name: Checkout repository
      uses: actions/checkout@v4

    # ✅ Use local steps for PHP setup instead of third-party
    - name: Install PHP, Composer, Node.js
      run: |
        set -eux 
        sudo add-apt-repository ppa:ondrej/php -y
        sudo apt-get update
        sudo apt-get install -y php8.3 php8.3-cli php8.3-mbstring php8.3-xml php8.3-mysql php8.3-sqlite3 unzip curl git
        curl -sS https://getcomposer.org/installer | php
        sudo mv composer.phar /usr/local/bin/composer
        sudo apt-get install -y npm
        sudo npm install -g npm@latest

    # ✅ Install dependencies
    - name: Install Composer dependencies
      run: |
        set -eux
        composer install --no-dev --optimize-autoloader

    # ✅ Build frontend
    - name: Install & build frontend
      run: |
        set -eux 
        npm ci
        npm run build

    
    # ✅ Prepare build structure once
    - name: Prepare common build structure
      run: |
        set -eux 
        mkdir -p build_common
        cp -r app bootstrap config database public resources routes build_common/
        cp composer.json composer.lock artisan install.sql install57.sql build_common/
        cp env_install build_common/env_install
        cp yvsou_install_config.php build_common/yvsou_install_config.php   
        cp *.* build_common/ || true
        rm -f build_common/*.sh || true
        rm -f build_common/config/yvsou_config.php || true
        cp composer.sh build_common/ || true
      
        cp vite.config.js tailwind.config.js postcss.config.js build_common/ || true

        
        if [ -d plugins ]; then    
          cp -r plugins build_common/
        else
          mkdir -p build_common/plugins
        fi

        mkdir -p build_common/storage/app/{private,public,protected-files}
        mkdir -p build_common/storage/framework/{cache,sessions,testing,views}
        mkdir -p build_common/storage/logs
        cp storage/tmp-install.sqlite build_common/storage/tmp-install.sqlite || true

    # ✅ Build installer.zip
    - name: Build installer.zip
      run: |
        set -eux 
        mkdir -p staging/yvsou-cms
        cp -r build_common/* staging/yvsou-cms/
        cd staging
        zip -r ../installer-${{ github.ref_name }}.zip yvsou-cms \
          --exclude='**/*.log' --exclude='node_modules/*' --exclude='.git/*' --exclude='bootstrap/cache/*.php'

    # ✅ Build installvendor.zip
    - name: Build installvendor.zip
      run: |
        set -eux 
        cp -r vendor build_common/
        mkdir -p staging_vendor/yvsou-cms
        cp -r build_common/* staging_vendor/yvsou-cms/
        cd staging_vendor
        zip -r ../installvendor-${{ github.ref_name }}.zip yvsou-cms \
          --exclude='**/*.log' --exclude='node_modules/*' --exclude='.git/*' --exclude='bootstrap/cache/*.php'

     # ✅ Create source archives
    - name: Create source.zip and source.tar.gz
      run: |
        git archive --format zip --output source-${{ github.ref_name }}.zip HEAD
        git archive --format tar.gz --output source-${{ github.ref_name }}.tar.gz HEAD
      
    # ✅ Generate SHA-256 checksums
    - name: Generate SHA-256 checksums
      run: |
        set -eux 
        sha256sum *.zip > checksums-sha256.txt
        sha256sum *.tar.gz >> checksums-sha256.txt
        cat checksums-sha256.txt

    - name: Create GitHub Release if not exists  
      if: github.ref_type == 'tag'
      run: |
        set -eux 
        git config --global user.email "ci@example.com"
        git config --global user.name "CI Bot"
        if gh release view ${{ github.ref_name }}; then
          echo "Release for tag ${{ github.ref_name }} already exists."
        else
          gh release create ${{ github.ref_name }} --title "${{ github.ref_name }}" --notes "Auto release for ${{ github.ref_name }}"
        fi  
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # ✅ Use official GitHub CLI to upload releases
    - name: Upload release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -eux 
        gh release upload ${{ github.ref_name }} installer-${{ github.ref_name }}.zip installvendor-${{ github.ref_name }}.zip source-${{ github.ref_name }}.zip source-${{ github.ref_name }}.tar.gz checksums-sha256.txt --clobber
